import*as _ from"https://unpkg.com/h3-js/dist/h3-js.es.js";import{geojson as R,s2 as T,s1 as P}from"https://esm.sh/s2js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))i(r);new MutationObserver(r=>{for(const o of r)if(o.type==="childList")for(const s of o.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&i(s)}).observe(document,{childList:!0,subtree:!0});function e(r){const o={};return r.integrity&&(o.integrity=r.integrity),r.referrerPolicy&&(o.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?o.credentials="include":r.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function i(r){if(r.ep)return;r.ep=!0;const o=e(r);fetch(r.href,o)}})();class U{constructor(t,e={}){this.map=t,this.latitudeMax=90,this.latitudeMin=-this.latitudeMax,this.longitudeMax=180,this.longitudeMin=-this.longitudeMax,this.extraFillArea=.5,this.options={color:e.color||"rgba(255, 0, 0, 1)",width:e.width||1,redraw:e.redraw||"move"},this.sourceId="h3-grid",this.gridLayerId="h3-grid-layer",this.initialize()}initialize(){this.map.getSource(this.sourceId)||this.map.addSource(this.sourceId,{type:"geojson",data:this.generateGrid()}),this.map.getLayer(this.gridLayerId)||this.map.addLayer({id:this.gridLayerId,source:this.sourceId,type:"fill",layout:{},paint:{"fill-color":"transparent","fill-opacity":1}}),this.map.getLayer("outline")||this.map.addLayer({id:"outline",type:"line",source:this.sourceId,layout:{},paint:{"line-color":["get","color"],"line-width":this.options.width}}),this._hasListener||(this.map.on(this.options.redraw,()=>this.updateGrid()),this._hasListener=!0)}updateGrid(){const t=this.generateGrid(),e=this.map.getSource(this.sourceId);e&&e.setData(t)}show(){this.map.getLayer(this.gridLayerId)||this.map.addLayer({id:this.gridLayerId,source:this.sourceId,type:"fill",layout:{},paint:{"fill-color":"transparent","fill-opacity":1}}),this.map.getLayer("outline")||this.map.addLayer({id:"outline",type:"line",source:this.sourceId,layout:{},paint:{"line-color":["get","color"],"line-width":this.options.width}})}remove(){this.map.getLayer(this.gridLayerId)&&this.map.removeLayer(this.gridLayerId),this.map.getLayer("outline")&&this.map.removeLayer("outline")}getResolution(t){return t<=3?0:t<=4.4?1:t<=5.7?2:t<=7.1?3:t<=8.4?4:t<=9.8?5:t<=11.4?6:t<=12.7?7:t<=14.1?8:t<=15.5?9:t<=16.8?10:t<=18.2?11:t<=19.5?12:t<=21.1?13:t<=21.9?14:15}generateGrid(){var t=this.map.getZoom(),e=this.getResolution(t);const i=window.innerWidth,r=window.innerHeight,o=this.map.unproject([0,0]).toArray(),s=this.map.unproject([i,r]).toArray(),h=Math.min(o[0],s[0]),a=Math.max(o[0],s[0]),n=Math.min(o[1],s[1]),l=Math.max(o[1],s[1]),f=a-h,d=l-n;let u=h-f*this.extraFillArea,y=a+f*this.extraFillArea,c=n-d*this.extraFillArea,p=l+d*this.extraFillArea;u=Math.max(u,this.longitudeMin),y=Math.min(y,this.longitudeMax),c=Math.max(c,this.latitudeMin),p=Math.min(p,this.latitudeMax);let m=[];const I=180;let g=u;for(;g<this.longitudeMax&&g<y;){let L=Math.min(g+I,y,180);m.push([[p,g],[p,L],[c,L],[c,g]]),g+=I}for(var M=[].concat(...m.map(L=>_.polygonToCells(L,e))),w=[],x=0;x<M.length;x++){let L=M[x];if(w.some(b=>b.properties.h3_id===L))continue;let S=_.cellToBoundary(L,!0);S.find(b=>b[0]<-130)!==void 0&&(S=S.map(b=>b[0]>0?[b[0]-360,b[1]]:b));const G=_.getResolution(L),F=G>7?_.UNITS.m:_.UNITS.km,N=G>7?_.UNITS.m2:_.UNITS.km2,W=_.getIcosahedronFaces(L);let A=_.cellArea(L,N);A=parseFloat(A.toFixed(1)).toLocaleString();let C=_.getNumCells(e);C=C.toLocaleString();const j={type:"Feature",properties:{color:_.isPentagon(L)?"cyan":this.options.color,h3_id:L,resolution:G,icosa_faces:W,area:A,area_unit:N,edge_unit:F,num_hex:C},geometry:{type:"Polygon",coordinates:[S]}};w.push(j)}return{type:"FeatureCollection",features:w}}}class q{constructor(t,e={}){this.map=t,this.options={color:e.color||"rgba(255, 0, 0, 1)",width:e.width||1,redraw:e.redraw||"move"},this.sourceId="s2-grid",this.gridLayerId="s2-grid-layer",this.initialize()}initialize(){this.map.getSource(this.sourceId)||this.map.addSource(this.sourceId,{type:"geojson",data:this.generateGrid()}),this.map.getLayer(this.gridLayerId)||this.map.addLayer({id:this.gridLayerId,source:this.sourceId,type:"fill",layout:{},paint:{"fill-color":"transparent","fill-opacity":1}}),this.map.getLayer("outline")||this.map.addLayer({id:"outline",type:"line",source:this.sourceId,layout:{},paint:{"line-color":this.options.color,"line-width":this.options.width}}),this._hasListener||(this.map.on(this.options.redraw,()=>this.updateGrid()),this._hasListener=!0)}updateGrid(){const t=this.generateGrid(),e=this.map.getSource(this.sourceId);e&&e.setData(t)}show(){this.map.getLayer(this.gridLayerId)||this.map.addLayer({id:this.gridLayerId,source:this.sourceId,type:"fill",layout:{},paint:{"fill-color":"transparent","fill-opacity":1}}),this.map.getLayer("outline")||this.map.addLayer({id:"outline",type:"line",source:this.sourceId,layout:{},paint:{"line-color":this.options.color,"line-width":this.options.width}})}remove(){this.map.getLayer(this.gridLayerId)&&this.map.removeLayer(this.gridLayerId),this.map.getLayer("outline")&&this.map.removeLayer("outline")}getResolution(t){return Math.floor(t)}generateGrid(){const t=this.map.getBounds(),e=this.map.getZoom(),i=this.getResolution(e),r={type:"Polygon",coordinates:[[[t.getWest(),t.getSouth()],[t.getEast(),t.getSouth()],[t.getEast(),t.getNorth()],[t.getWest(),t.getNorth()],[t.getWest(),t.getSouth()]]]};return{type:"FeatureCollection",features:new R.RegionCoverer({minLevel:i,maxLevel:i}).covering(r).map(a=>{const n=T.Cell.fromCellID(a);let l=[];for(let d=0;d<=4;d++){const u=n.vertex(d%4),y=T.LatLng.fromPoint(u),c=P.angle.degrees(y.lng),p=P.angle.degrees(y.lat);l.push([c,p])}return l.find(([d,u])=>d>130)&&(l=l.map(([d,u])=>d<0?[d+360,u]:[d,u])),{type:"Feature",geometry:{type:"Polygon",coordinates:[l]},properties:{s2_token:T.cellid.toToken(a).toString(),resolution:i}}})}}}class Z{constructor(t,e={}){this.BASE32_CODES="0123456789bcdefghjkmnpqrstuvwxyz",this.BASE32_CODES_DICT={};for(let i=0;i<this.BASE32_CODES.length;i++)this.BASE32_CODES_DICT[this.BASE32_CODES.charAt(i)]=i;this.ENCODE_AUTO="auto",this.SIGFIG_HASH_LENGTH=[0,5,7,8,11,12,13,15,16,17,18],this.map=t,this.options={color:e.color||"rgba(255, 0, 0, 1)",width:e.width||1,redraw:e.redraw||"move"},this.sourceId="geohash-grid",this.gridLayerId="geohash-grid-layer",this.initialize()}initialize(){this.map.getSource(this.sourceId)||this.map.addSource(this.sourceId,{type:"geojson",data:this.generateGrid()}),this.map.getLayer(this.gridLayerId)||this.map.addLayer({id:this.gridLayerId,source:this.sourceId,type:"fill",layout:{},paint:{"fill-color":"transparent","fill-opacity":1}}),this.map.getLayer("outline")||this.map.addLayer({id:"outline",type:"line",source:this.sourceId,layout:{},paint:{"line-color":this.options.color,"line-width":this.options.width}}),this._hasListener||(this.map.on(this.options.redraw,()=>this.updateGrid()),this._hasListener=!0)}updateGrid(){const t=this.generateGrid(),e=this.map.getSource(this.sourceId);e&&e.setData(t)}show(){this.map.getLayer(this.gridLayerId)||this.map.addLayer({id:this.gridLayerId,source:this.sourceId,type:"fill",layout:{},paint:{"fill-color":"transparent","fill-opacity":1}}),this.map.getLayer("outline")||this.map.addLayer({id:"outline",type:"line",source:this.sourceId,layout:{},paint:{"line-color":this.options.color,"line-width":this.options.width}})}remove(){this.map.getLayer(this.gridLayerId)&&this.map.removeLayer(this.gridLayerId),this.map.getLayer("outline")&&this.map.removeLayer("outline")}generateGrid(){const t=this.map.getZoom(),e=this.getResolution(t),i=this.map.getBounds();let r=i.getSouth(),o=i.getWest(),s=i.getNorth(),h=i.getEast(),a,n;e===1?(a=360/8,n=180/4):e===2?(a=360/(8*4),n=180/(8*4)):e===3?(a=360/(8*32),n=180/(4*32)):e===4?(a=360/(8*32*4),n=180/(4*32*8)):e===5?(a=360/(8*32*4*8),n=180/(4*32*8*4)):e===6?(a=360/(8*32*4*8*4),n=180/(4*32*8*4*8)):e===7?(a=360/(8*32*4*8*4*8),n=180/(4*32*8*4*8*4)):e===8?(a=360/(8*32*4*8*4*8*4),n=180/(4*32*8*4*8*4*8)):e===9?(a=360/(8*32*4*8*4*8*4*8),n=180/(4*32*8*4*8*4*8*4)):e===10&&(a=360/(8*32*4*8*4*8*4*8*4),n=180/(4*32*8*4*8*4*8*4*8));const l=-180,f=-90,d=Math.floor((o-l)/a)*a+l,u=Math.ceil((h-l)/a)*a+l,y=Math.floor((r-f)/n)*n+f,c=Math.ceil((s-f)/n)*n+f,p=[],m=[];for(let g=d;g<u;g+=a)g>=-180&&g<=180&&p.push(g);for(let g=y;g<c;g+=n)g>=-90&&g<=90&&m.push(g);const I=[];for(const g of p)for(const M of m){const w=g,x=M,L=g+a,B=M+n,S=[[[w,x],[L,x],[L,B],[w,B],[w,x]]],G=(x+B)/2,F=(w+L)/2,N=this.encode(G,F,e);if(I.some(C=>C.properties.geohash_id===N))continue;const A={type:"Feature",geometry:{type:"Polygon",coordinates:S},properties:{geohash_id:N,resolution:e}};I.push(A)}return{type:"FeatureCollection",features:I}}getResolution(t){return t<4?1:t>=4&&t<6?2:t>=6&&t<8?3:t>=8&&t<10?4:t>=10&&t<12?5:t>=12&&t<14?6:t>=14&&t<16?7:t>=16&&t<18?8:t>=18&&t<20?9:10}encode(t,e,i){if(i===this.ENCODE_AUTO){if(typeof t=="number"||typeof e=="number")throw new Error("string notation required for auto resolution.");var r=t.split(".")[1].length,o=e.split(".")[1].length,s=Math.max(r,o);i=this.SIGFIG_HASH_LENGTH[s]}else i===void 0&&(i=9);for(var h=[],a=0,n=0,l=0,f=90,d=-90,u=180,y=-180,c;h.length<i;)if(n%2===0?(c=(u+y)/2,e>c?(l=(l<<1)+1,y=c):(l=(l<<1)+0,u=c)):(c=(f+d)/2,t>c?(l=(l<<1)+1,d=c):(l=(l<<1)+0,f=c)),a++,n++,a===5){var p=this.BASE32_CODES[l];h.push(p),a=0,l=0}return h.join("")}encode_int(t,e,i){i=i||52;for(var r=0,o=90,s=-90,h=180,a=-180,n,l=0;r<i;)l*=2,r%2===0?(n=(h+a)/2,e>n?(l+=1,a=n):h=n):(n=(o+s)/2,t>n?(l+=1,s=n):o=n),r++;return l}decode_bbox(t){for(var e=!0,i=90,r=-90,o=180,s=-180,h,a=0,n=0,l=t.length;n<l;n++){var f=t[n].toLowerCase();a=this.BASE32_CODES_DICT[f];for(var d=4;d>=0;d--){var u=a>>d&1;e?(h=(o+s)/2,u===1?s=h:o=h):(h=(i+r)/2,u===1?r=h:i=h),e=!e}}return[r,s,i,o]}decode_bbox_int(t,e){e=e||52;for(var i=90,r=-90,o=180,s=-180,h=0,a=0,n=e/2,l=0;l<n;l++)a=this.get_bit(t,(n-l)*2-1),h=this.get_bit(t,(n-l)*2-2),h===0?i=(i+r)/2:r=(i+r)/2,a===0?o=(o+s)/2:s=(o+s)/2;return[r,s,i,o]}get_bit(t,e){return t/Math.pow(2,e)&1}decode(t){var e=this.decode_bbox(t),i=(e[0]+e[2])/2,r=(e[1]+e[3])/2,o=e[2]-i,s=e[3]-r;return{latitude:i,longitude:r,error:{latitude:o,longitude:s}}}decode_int(t,e){var i=this.decode_bbox_int(t,e),r=(i[0]+i[2])/2,o=(i[1]+i[3])/2,s=i[2]-r,h=i[3]-o;return{latitude:r,longitude:o,error:{latitude:s,longitude:h}}}neighbor(t,e){var i=this.decode(t),r=i.latitude+e[0]*i.error.latitude*2,o=i.longitude+e[1]*i.error.longitude*2;return this.encode(r,o,t.length)}neighbor_int(t,e,i){i=i||52;var r=this.decode_int(t,i),o=r.latitude+e[0]*r.error.latitude*2,s=r.longitude+e[1]*r.error.longitude*2;return this.encode_int(o,s,i)}neighbors(t){t.length;const e=this.decode(t);return e.latitude,e.longitude,e.error.latitude*2,e.error.longitude*2,[this._encodeNeighbor(1,0),this._encodeNeighbor(1,1),this._encodeNeighbor(0,1),this._encodeNeighbor(-1,1),this._encodeNeighbor(-1,0),this._encodeNeighbor(-1,-1),this._encodeNeighbor(0,-1),this._encodeNeighbor(1,-1)]}_encodeNeighbor(t,e){const i=lat+t*latErr,r=lon+e*lonErr;return this.encode(i,r,hashStringLength)}neighbors_int(t,e=52){const i=this.decode_int(t,e),r=i.latitude,o=i.longitude,s=i.error.latitude*2,h=i.error.longitude*2;return[this.neighbor_int(r,o,1,0,s,h,e),this.neighbor_int(r,o,1,1,s,h,e),this.neighbor_int(r,o,0,1,s,h,e),this.neighbor_int(r,o,-1,1,s,h,e),this.neighbor_int(r,o,-1,0,s,h,e),this.neighbor_int(r,o,-1,-1,s,h,e),this.neighbor_int(r,o,0,-1,s,h,e),this.neighbor_int(r,o,1,-1,s,h,e)]}neighbor_int(t,e,i,r,o,s,h){const a=t+i*o,n=e+r*s;return this.encode_int(a,n,h)}bboxes(t,e,i,r,o){o=o||9;for(var s=this.encode(t,e,o),h=this.encode(i,r,o),a=this.decode(s),n=a.error.latitude*2,l=a.error.longitude*2,f=this.decode_bbox(s),d=this.decode_bbox(h),u=Math.round((d[0]-f[0])/n),y=Math.round((d[1]-f[1])/l),c=[],p=0;p<=u;p++)for(var m=0;m<=y;m++)c.push(this.neighbor(s,[p,m]));return c}bboxes_int(t,e,i,r,o=52){const s=this.encode_int(t,e,o),h=this.encode_int(i,r,o),a=this.decode_int(s,o),n=a.error.latitude*2,l=a.error.longitude*2,f=this.decode_bbox_int(s,o),d=this.decode_bbox_int(h,o),u=Math.round((d[0]-f[0])/n),y=Math.round((d[1]-f[1])/l),c=[];for(let p=0;p<=u;p++)for(let m=0;m<=y;m++)c.push(this.neighbor_int(s,[p,m],o));return c}}const E=new maplibregl.Map({container:"map",style:"https://raw.githubusercontent.com/thangqd/vstyles/main/vstyles/omt/fiord/fiord.json",zoom:0});let O={},H={h3:!1,s2:!1,geohash:!1};window.toggleGrid=function(v){H[v]?(O[v].remove(),H[v]=!1):(O[v].show(),H[v]=!0)};E.on("style.load",()=>{X()});function X(){O={h3:new U(E,{color:"rgba(255, 0, 0, 0.5)",width:2}),s2:new q(E,{color:"rgba(0, 255, 0, 0.5)",width:2}),geohash:new Z(E,{color:"rgba(0, 0, 255, 0.5)",width:2})},E.addControl(new maplibregl.NavigationControl),E.addControl(new maplibregl.GeolocateControl({positionOptions:{enableHighAccuracy:!0},trackUserLocation:!0}))}
